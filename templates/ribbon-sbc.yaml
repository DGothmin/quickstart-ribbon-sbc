AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to setup and deploy vSBC HA instances and
  2 PKTART instances to test vSBC. This template creates required vpc, subnet and
  other routing elements required IAM role to performce IP movement betweenn two vSBC
  instances.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
      - Label:
          default: Instance Configuration
        Parameters:
          - KeyPairName
          - SBCInstanceType
      - Label:
          default: Network Configuration
        Parameters:
          - SBCInternalVoipCIDR
          - SBCExternalVoipCIDR
          - SBCAvailabilityZone
      - Label:
          default: 'Optional: SBC configuration. For default configuration no need
            to change these values.'
        Parameters:
          - SBCPersonalityType
          - SBCActiveInstanceName
          - SBCPassiveInstanceName
          - SBCSystemName
          - Tenancy
          - PlacementId
          - SBCVolumeType
          - SBCVolumeIOPS
          - SBCVolumeSize
Parameters:
  KeyPairName:
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to various EC2 instances'
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  SBCExternalVoipCIDR:
    Description: CIDR used within the SBC External Voip (public facing) subnet.
    Type: String
    MinLength: '1'
    Default: 10.74.20.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and
      subnet of VPC.
  SBCInternalVoipCIDR:
    Description: CIDR used within the SBC Internal Voip (private) subnet.
      served by Mangler instance.
    Type: String
    MinLength: '1'
    Default: 10.74.20.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and
      subnet of VPC.
  HFEManagementNeedsEIP:
    Description: Enable EIP on the management interface of the HFE instance(s)?
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
  HFEManagementEIPAccessCIDR:
    Description: The CIDR range used to access the HFE Management EIP.
    Type: String
    Default: ''
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  SBCExVoipSubnet:
    Type: String
  SBCManagementSubnet:
    Type: String
  SBCHASubnet:
    Type: String
  HFEPublicSubnet:
    Type: String
  HFEPrivateSubnet:
    Type: String
# TODO: Removed in leiu of VPC Template. come back to this.
  SBCAvailabilityZone:
    Description: Enter Availability Zone for SBC, New subnets for SBC will be created
      here.
    Type: AWS::EC2::AvailabilityZone::Name
  SBCInstanceType:
    Description: Instance type for the SBC Mangler.
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m4.xlarge
      - m5.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  SBCPersonalityType:
    Description: SBC Personality Type. Currently only supports 'isbc' (Integrated). Distributed is currently not supported.
    Type: String
    Default: isbc
    AllowedValues:
      - isbc
    ConstraintDescription: Must be a valid SBC Personality type.
  SBCActiveInstanceName:
    Description: CE name of the active instance
    Type: String
    Default: vsbc1
    MaxLength: '63'
    AllowedPattern: ^[A-Za-z]{1}[-A-Za-z0-9.]*[A-Za-z0-9]{1}$
    ConstraintDescription: 'Enter valid ceName(instance name).  Regex: ^[A-Za-z]{1}[-A-Za-z0-9.]*[A-Za-z0-9]{1}$'
  SBCPassiveInstanceName:
    Description: CE name of the standby instance
    Type: String
    Default: vsbc2
    MaxLength: '63'
    AllowedPattern: ^[A-Za-z]{1}[-A-Za-z0-9.]*[A-Za-z0-9]{1}$
    ConstraintDescription: 'Enter valid ceName(instance name).  Regex: ^[A-Za-z]{1}[-A-Za-z0-9.]*[A-Za-z0-9]{1}$'
  SBCSystemName:
    Description: System Name
    Type: String
    Default: vsbcSystem
    MaxLength: '26'
    AllowedPattern: ^[A-Za-z]{1}[-A-Za-z0-9]*[A-Za-z0-9]{1}$
    ConstraintDescription: 'Enter valid system name.  Regex: ^[A-Za-z]{1}[-A-Za-z0-9]*[A-Za-z0-9]{1}$ '
  # TODO: Rename. De-couple scope. 
  SSHAccessCIDR:
    Description: IP CIDR from where you could SSH into SBC and PKTART instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  # TODO: Removed due to VPC Template.
  Tenancy:
    Description: Tenancy attribute for SBC instances
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated
  # TODO: Removed due to VPC Template.
  # - Is this something we should support?
  # - Does the VPC Template handle this already?
  # - Can we condition it? 
  PlacementId:
    Description: PlacementGroup to launch SBC instances(Optional)
    Type: String
    Default: ''
  SBCVolumeType:
    Description: Select Type of Volume for SBC
    Type: String
    Default: io1
    AllowedValues:
      - gp2
      - io1
  CreateVPCEndPoint:
    Description: Do you want to create VPC End-point to access API server? if you
      select no then SBC will reach API server using EIP on mgt0 ports
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
  SBCVolumeIOPS:
    Description: Enter IOPS reservation for IO1 type EBS volume [<= 1950]. This value is ignored for GP2 type volumes.
    Type: Number
    Default: '600'
    MaxValue: '1950'
  SBCVolumeSize:
    Description: Enter size of disk in GiB. Minimum disk required is 65 GiB
    Type: Number
    Default: '65'
    MinValue: '65'
    MaxValue: '1000'
  QSS3BucketName:
    Type: String
    Default: aws-quickstart
  QSS3KeyPrefix:
    Type: String
    Default: quickstart-ribbon-sbc/
Conditions:
  # FIXME: This condition is not used.
  EipOnPkt0: !Equals
    - 'true'
    - 'true'
  VolumeTypeIO1: !Equals
    - !Ref 'SBCVolumeType'
    - io1
  CreateVPCEndPoint: !Equals
    - !Ref 'CreateVPCEndPoint'
    - 'yes'
  EipForHFEManagementInterface: !Equals
    - !Ref 'HFEManagementNeedsEIP'
    - 'Yes'
  NoVPCEndpointt: !Equals
    - !Ref 'CreateVPCEndPoint'
    - 'no'
Rules:
  NameValidation:
    Assertions:
    - Assert: !Not
      - !Equal
        - !Ref 'SBCActiveInstanceName'
        - !Ref 'SBCPassiveInstanceName'
      AssertionDescription: "SBCActiveInstanceName and SBCPassiveInstanceName must be unique"
    - Assert: !Not
      - !Equal
        - !Ref 'SBCActiveInstanceName'
        - !Ref 'SBCSystemName'
      AssertionDescription: "SBCActiveInstanceName and SBCSystemName cannot be the same."
    - Assert: !Not
      - !Equal
        - !Ref 'SBCPassiveInstanceName'
        - !Ref 'SBCSystemName'
      AssertionDescription: "SBCPassiveInstanceName and SBCSystemName cannot be the same."
Mappings:
  AWSAMIRegionMap:
    AMI:
      RIBBONSBCAMI: <SBC_AMI_MAPPING_NAME>
      RIBBONPKTAMI: <PKT_AMI_MAPPING_NAME>
      RIBBONHFEAMI: <HFE_AMI_MAPPING_HERE>
    us-east-1:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    us-east-2:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    us-west-1:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    us-west-2:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    ca-central-1:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    ap-south-1:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    ap-northeast-2:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    ap-southeast-1:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    ap-southeast-2:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    eu-central-1:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    eu-west-1:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    eu-west-2:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    eu-west-3:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
    sa-east-1:
      RIBBONSBCAMI:    <AMI_ID>
      RIBBONPKTAMI:    <AMI_ID>
      RIBBONHFEAMI:    <AMI_ID>
Resources:
  # Order:
  # - Resource Type
  # -- SBC Active/Combined
  # -- SBC Passive/Combined
  # -- HFE
  # IAM Instance Roles.
  SBCInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "SBCInstanceRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Actions on SBC Instances.
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AllocateAddress
                  - ec2:AssignPrivateIpAddresses
                  - ec2:AssociateAddress
                  - ec2:AttachNetworkInterface
                  - ec2:DisassociateAddress
                  - ec2:DescribeInstances
                  - ec2:DescribeAddresses
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeRegions
                  - ec2:ModifyInstanceAttribute
                  - ec2:DescribeSubnets
                Resource: "*"
  HFEInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "HFEInstanceRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Allow access to S3 Bucket.
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                - 'arn:aws:s3:::${QSS3BucketName}'
                - 'arn:aws:s3:::${QSS3BucketName}/*'
  # IAM Instance Profiles.
  SBCInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "SBCInstanceProfile-${AWS::Region}"
      Path: /
      Roles: !Ref 'SBCInstanceRole'
  HFEInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "HFEInstanceProfile-${AWS::Region}"
      Path: /
      Roles: !Ref 'HFEInstanceRole'
  # EC2 Instances.
  SBCActiveInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RIBBONSBCAMI
      IamInstanceProfile: !Ref 'SBCInstanceProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref 'SBCVolumeType'
            VolumeSize: !Ref 'SBCVolumeSize'
            Iops: !If
              - VolumeTypeIO1
              - !Ref 'SBCVolumeIOPS'
              - !Ref 'AWS::NoValue'
            DeleteOnTermination: 'true'
      InstanceType: !Ref 'SBCInstanceType'
      Tenancy: !Ref 'Tenancy'
      PlacementGroupName: !Ref 'PlacementId'
      EbsOptimized: 'True'
      KeyName: !Ref 'KeyPairName'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'SBCActiveMgtIface'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'SBCActiveHAIface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'SBCActiveInVoipIface'
          DeviceIndex: '2'
        - NetworkInterfaceId: !Ref 'SBCActiveExVoipIface'
          DeviceIndex: '3'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-1"
      UserData: !Base64
        !Sub |
          { "CERole"               : "ACTIVE",
            "ReverseNatPkt0"       : "True",
            "ReverseNatPkt1"       : "False",
            "IAM_ROLE"             : ${SBCInstanceRole},
            "ALT_Mgt0_00"          : "LOGICAL_MGMT_IP",
            "ALT_Pkt0_00"          : "VIP1",
            "ALT_Pkt1_00"          : "VIP2",
            "ClusterIp"            : "${SBCPassiveHAIface.PrimaryPrivateIpAddress}",
            "HFE"                  : !Select [0, ${HFEPublicInterface.SecondaryPrivateIpAddresses}],
            "SbcPersonalityType"   : "${SBCPersonalityType}",
            "SbcMgmtMode"          : "centralized",
            "TemplateName"         : "AWS_HA_template.json",
            "TemplateVersion"      : "V07.00.00A011",
            "CEName"               : "${SBCActiveInstanceName}",
            "PeerCEName"           : "${SBCPassiveInstanceName}",
            "PeerCEHa0IPv4Address" : "${SBCPassiveHAIface.PrimaryPrivateIpAddress}",
            "SystemName"           : "${SBCSystemName}",
            "ActiveRoleMgtId"      : "${SBCActiveMgtIface}",
            "NodeName"             : "${AWS::StackName}"
          }
  SBCPassiveInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RIBBONSBCAMI
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref 'SBCVolumeType'
            VolumeSize: !Ref 'SBCVolumeSize'
            Iops: !If
              - VolumeTypeIO1
              - !Ref 'SBCVolumeIOPS'
              - !Ref 'AWS::NoValue'
            DeleteOnTermination: 'true'
      IamInstanceProfile: !Ref 'SBCInstanceProfile'
      InstanceType: !Ref 'SBCInstanceType'
      Tenancy: !Ref 'Tenancy'
      PlacementGroupName: !Ref 'PlacementId'
      EbsOptimized: 'True'
      KeyName: !Ref 'KeyPairName'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'SBCPassiveMgtIface'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'SBCPassiveHAIface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'SBCPassiveInVoipIface'
          DeviceIndex: '2'
        - NetworkInterfaceId: !Ref 'SBCPassiveExVoipIface'
          DeviceIndex: '3'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-2"
      UserData: !Base64
        !Sub |
          { "CERole"               : "ACTIVE",
            "ReverseNatPkt0"       : "True",
            "ReverseNatPkt1"       : "False",
            "IAM_ROLE"             : ${SBCInstanceRole},
            "ALT_Mgt0_00"          : "LOGICAL_MGMT_IP",
            "ALT_Pkt0_00"          : "VIP1",
            "ALT_Pkt1_00"          : "VIP2",
            "ClusterIp"            : "${SBCPassiveHAIface.PrimaryPrivateIpAddress}",
            "HFE"                  : !Select [0, ${HFEPublicInterface.SecondaryPrivateIpAddresses}],
            "SbcPersonalityType"   : "${SBCPersonalityType}",
            "SbcMgmtMode"          : "centralized",
            "TemplateName"         : "AWS_HA_template.json",
            "TemplateVersion"      : "V07.00.00A011",
            "CEName"               : "${SBCActiveInstanceName}",
            "PeerCEName"           : "${SBCPassiveInstanceName}",
            "PeerCEHa0IPv4Address" : "${SBCPassiveHAIface.PrimaryPrivateIpAddress}",
            "SystemName"           : "${SBCSystemName}",
            "ActiveRoleMgtId"      : "${SBCActiveMgtIface}",
            "NodeName"             : "${AWS::StackName}"
          }
  HFEInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RIBBONHFEAMI
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '20'
            DeleteOnTermination: 'false'
      IamInstanceProfile: !Ref 'HFEInstanceProfile'
      InstanceType: !Ref 'SBCInstanceType'
      Tenancy: !Ref 'Tenancy'
      PlacementGroupName: !Ref 'PlacementId'
      EbsOptimized: 'True'
      KeyName: !Ref 'KeyPairName'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'HFEPublicInterface'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'HFEManagementInterface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'HFEPrivateInterface'
          DeviceIndex: '2'
      Tags:
        - Key: Name
          Value: "HFE Instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          HFE_DIR="/home/ec2-user/HFE/"
          HFE_FILE="$HFE_DIR/HFE.sh"
          LOG_FILE="$HFE_DIR/cloud-init-nat.log"
          NAT_VAR="$HFE_DIR/natVars.input"
          function timestamp(){
            date +"%Y-%m-%d %T"
          }
          mkdir -p ${!HFE_DIR};
          aws s3 cp ${HFEScriptS3Location} $HFE_FILE
          if [ $? -ne 0 ]; then
            /bin/echo $(!timestamp) "Error:Could not copy HFE script from S3 bucket."
          else
            /bin/echo $(!timestamp) "Copied HFE script from S3 bucket."
          fi;
          /bin/echo "SBC_SECONDARY_IP=${SBCActiveInVoipIface.SecondaryPrivateIpAddresses.0}" >> $NAT_VAR
          " >> $NAT_VAR
          /bin/echo "REMOTE_SSH_MACHINE_IP=\\"
          !If
            EipForHFEManagementInterface
            !Ref 'HFEManagementEIPAccessCIDR'
            ''
          /bin/echo $(!timestamp) "Copied natVars.input" >> ${!LOG_FILE}
          sudo chmod 744 ${!HFE_FILE}
          sudo /bin/bash ${!HFE_FILE} setup
          /bin/echo "Configured using HFE script ${!HFE_FILE}" >> ${!LOG_FILE}
          /bin/echo $(!timestamp) " =========================   Done    ==========================================" >> ${!LOG_FILE}
  # VPC Endpoints
  SBCEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVPCEndPoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: 'True'
      SubnetIds: !Ref 'SBCManagementSubnet'
      SecurityGroupIds: !Ref 'SBCManagementSG'
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2"
      VpcId: !Ref 'VPCID'
  # Network Interfaces
  SBCActiveExVoipIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'SBCExVoipSubnet'
      Description: !Sub "${SBCSystemName}-pkt1A_Ribbon"
      GroupSet:
        - !Ref 'SBCInternalVoipSG'
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-pkt1A_Ribbon"
  SBCActiveInVoipIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'HFEPrivateSubnet'
      Description: !Sub "${SBCSystemName}-pkt0A_Ribbon"
      GroupSet:
        - !Ref 'SBCInternalVoipSG'
      SecondaryPrivateIpAddressCount: 1
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-pkt0A_Ribbon"
  SBCActiveMgtIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'SBCManagementSubnet'
      # is 'mgt0A_Ribbon' the OS Interface name?
      Description: !Sub "${SBCSystemName}-mgt0A_Ribbon"
      GroupSet:
        - !Ref 'SBCManagementSG'
      SecondaryPrivateIpAddressCount: 1
      SourceDestCheck: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-mgt0A_Ribbon"
  SBCActiveHAIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'SBCHASubnet'
      Description: !Sub "${SBCSystemName}-ha0A_Ribbon"
      GroupSet:
        - !Ref 'SBCHASecurityGroup'
      SourceDestCheck: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-ha0A_Ribbon"
  SBCPassiveExVoipIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'SBCExVoipSubnet'
      Description: !Sub "${SBCSystemName}-pkt1B_Ribbon"
      GroupSet:
        - !Ref 'SBCInternalVoipSG'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-pkt1B_Ribbon"
  SBCPassiveInVoipIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'HFEPrivateSubnet'
      Description: !Sub "${SBCSystemName}-pkt0B_Ribbon"
      GroupSet:
        - !Ref 'SBCInternalVoipSG'
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-pkt0B_Ribbon"
  SBCPassiveMgtIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'SBCManagementSubnet'
      Description: !Sub "${SBCSystemName}-mgt0B_Ribbon"
      GroupSet:
        - !Ref 'SBCManagementSG'
      SourceDestCheck: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-mgt0B_Ribbon"
  SBCPassiveHAIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'SBCHASubnet'
      Description: !Sub "${SBCSystemName}-ha0B_Ribbon"
      GroupSet:
        - !Ref 'SBCHASecurityGroup'
      SourceDestCheck: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-ha0B_Ribbon"
  HFEPublicInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'HFEPublicSubnet'
      GroupSet:
        - !Ref 'SBCExternalVoipSG'
      SecondaryPrivateIpAddressCount: '1'
      SourceDestCheck: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName} HFE Public Interface"
  HFEPrivateInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'HFEPrivateSubnet'
      GroupSet:
        - !Ref 'SBCInternalVoipSG'
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName} HFE Private Interface"
  HFEManagementInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref 'SBCManagementSubnet'
      GroupSet:
        - !Ref 'HFEManagementSG'
      SourceDestCheck: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName} HFE Management Interface"
  # Security Groups
  SBCExternalVoipSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for SBC External Voip traffic. (Incoming calls)
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: 'udp'
          FromPort: '5060'
          ToPort: '5061'
          CidrIp: !Ref SBCExternalVoipCIDR
        - IpProtocol: 'tcp'
          FromPort: '5060'
          ToPort: '5061'
          CidrIp: !Ref SBCExternalVoipCIDR
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref SBCSystemName
              - SecurityGroup5_Ribbon
  SBCInternalVoipSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for SBC Internal Voip traffic. (Relay to internal infra)
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '5060'
          ToPort: '5061'
          CidrIp: !Ref 'SBCInternalVoipCIDR'
        - IpProtocol: 'udp'
          FromPort: '5060'
          ToPort: '5061'
          CidrIp: !Ref 'SBCInternalVoipCIDR'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref SBCSystemName
              - SecurityGroup3_Ribbon
  SBCHASecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for SBC HA interface traffic.
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref 'SSHAccessCIDR'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName} HA Security Group"
  SBCManagementSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Mgt SBC
      VpcId: !Ref 'VPCID'
      # These rules need refactoring.
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref 'SSHAccessCIDR'
      Tags:
        - Key: Name
          Value: !Sub "${SBCSystemName}-SecurityGroup1_Ribbon"
  HFEManagementSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for HFE Management Traffic.
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref 'SSHAccessCIDR'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref SBCSystemName
              - SecurityGroup4_Ribbon
  # Elastic IPs
  SBCActiveMgtEIP:
    Type: AWS::EC2::EIP
    Condition: NoVPCEndpointt
    Properties:
      Domain: !Ref 'VPCID'
  HFEExVoipEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref 'VPCID'
  HFEPublicEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref 'VPCID'
  HFEManagementEIP:
    Type: AWS::EC2::EIP
    Condition: EipForHFEManagementInterface
    Properties:
      Domain: !Ref 'VPCID'

  SBCPassiveMgtEIP:
    Type: AWS::EC2::EIP
    Condition: NoVPCEndpointt
    Properties:
      Domain: !Ref 'VPCID'
  HFEPublicEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'HFEPublicEIP.AllocationId'
      NetworkInterfaceId: !Ref 'HFEPublicInterface'
      PrivateIpAddress: !Select
        - '0'
        - !GetAtt 'HFEPublicInterface.SecondaryPrivateIpAddresses'
  HFEExVoipEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'HFEExVoipEIP.AllocationId'
      NetworkInterfaceId: !Ref 'HFEPublicInterface'
  SBCPassiveMgtEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: NoVPCEndpointt
    Properties:
      AllocationId: !GetAtt 'SBCPassiveMgtEIP.AllocationId'
      NetworkInterfaceId: !Ref 'SBCPassiveMgtIface'
      PrivateIpAddress: !GetAtt 'SBCPassiveMgtIface.PrimaryPrivateIpAddress'
  HFEManagementEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: EipForHFEManagementInterface
    Properties:
      AllocationId: !GetAtt 'HFEManagementEIP.AllocationId'
      NetworkInterfaceId: !Ref 'HFEManagementInterface'
  SBCActiveMgtEIPAssocaition:
    Type: AWS::EC2::EIPAssociation
    Condition: NoVPCEndpointt
    Properties:
      AllocationId: !GetAtt 'SBCActiveMgtEIP.AllocationId'
      NetworkInterfaceId: !Ref 'SBCActiveMgtIface'
      PrivateIpAddress: !Select
        - '0'
        - !GetAtt 'SBCActiveMgtIface.SecondaryPrivateIpAddresses'

Outputs:
  InstanceIdActive:
    Value: !Ref 'SBCActiveInstance'
  DefaultCliAdminPassword:
    Description: 'It is eth0 interface-id of instance which has assigned active role
      in the template. This is used as default CLI admin password '
    Value: !Ref 'SBCActiveMgtIface'
  Mgt0InterfaceIDActive:
    Value: !Ref 'SBCActiveMgtIface'
  HA0InterfaceIDActive:
    Value: !Ref 'SBCActiveHAIface'
  Pkt0InterfaceIDActive:
    Value: !Ref 'SBCActiveInVoipIface'
  Pkt1InterfaceIDActive:
    Value: !Ref 'SBCActiveExVoipIface'
  InstanceIdStandby:
    Value: !Ref 'SBCPassiveInstance'
  Mgt0InterfaceIDStandby:
    Value: !Ref 'SBCPassiveMgtIface'
  HA0InterfaceIDStandby:
    Value: !Ref 'SBCPassiveHAIface'
  Pkt0InterfaceIDStandby:
    Value: !Ref 'SBCPassiveInVoipIface'
  Pkt1InterfaceIDStandby:
    Value: !Ref 'SBCPassiveExVoipIface'